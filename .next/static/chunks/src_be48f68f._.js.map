{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/Minesweeper/MinesweeperGame.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ntype Cell = {\n  isMine: boolean;\n  isRevealed: boolean;\n  isFlagged: boolean;\n  adjacentMines: number;\n  row: number;\n  col: number;\n};\n\ntype Board = Cell[][];\n\ntype Difficulty = {\n  rows: number;\n  cols: number;\n  mines: number;\n};\n\nconst difficulties: Record<string, Difficulty> = {\n  beginner: { rows: 9, cols: 9, mines: 10 },\n  intermediate: { rows: 16, cols: 16, mines: 40 },\n  expert: { rows: 16, cols: 30, mines: 99 },\n};\n\nconst MinesweeperGame: React.FC = () => {\n  const [difficulty, setDifficulty] = useState<Difficulty>(difficulties.beginner);\n  const [board, setBoard] = useState<Board>([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [win, setWin] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [timerActive, setTimerActive] = useState(false);\n\n  // Initialize board\n  const initBoard = useCallback(() => {\n    const { rows, cols, mines } = difficulty;\n    // Create empty board\n    let newBoard: Board = [];\n    for (let r = 0; r < rows; r++) {\n      const row: Cell[] = [];\n      for (let c = 0; c < cols; c++) {\n        row.push({\n          isMine: false,\n          isRevealed: false,\n          isFlagged: false,\n          adjacentMines: 0,\n          row: r,\n          col: c,\n        });\n      }\n      newBoard.push(row);\n    }\n\n    // Place mines randomly\n    let minesPlaced = 0;\n    while (minesPlaced < mines) {\n      const randRow = Math.floor(Math.random() * rows);\n      const randCol = Math.floor(Math.random() * cols);\n      if (!newBoard[randRow][randCol].isMine) {\n        newBoard[randRow][randCol].isMine = true;\n        minesPlaced++;\n      }\n    }\n\n    // Calculate adjacent mines\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < cols; c++) {\n        if (!newBoard[r][c].isMine) {\n          let count = 0;\n          for (let dr = -1; dr <= 1; dr++) {\n            for (let dc = -1; dc <= 1; dc++) {\n              const nr = r + dr;\n              const nc = c + dc;\n              if (\n                nr >= 0 &&\n                nr < rows &&\n                nc >= 0 &&\n                nc < cols &&\n                newBoard[nr][nc].isMine\n              ) {\n                count++;\n              }\n            }\n          }\n          newBoard[r][c].adjacentMines = count;\n        }\n      }\n    }\n\n    setBoard(newBoard);\n    setGameOver(false);\n    setWin(false);\n    setTimer(0);\n    setTimerActive(false);\n  }, [difficulty]);\n\n  useEffect(() => {\n    initBoard();\n  }, [initBoard]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (timerActive && !gameOver && !win) {\n      interval = setInterval(() => {\n        setTimer((t) => t + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [timerActive, gameOver, win]);\n\n  // Reveal cell logic\n  const revealCell = (row: number, col: number) => {\n    if (gameOver || win) return;\n    const newBoard = board.map((r) => r.map((c) => ({ ...c })));\n\n    const cell = newBoard[row][col];\n    if (cell.isRevealed || cell.isFlagged) return;\n\n    cell.isRevealed = true;\n\n    if (cell.isMine) {\n      setGameOver(true);\n      setTimerActive(false);\n      // Reveal all mines\n      for (let r = 0; r < difficulty.rows; r++) {\n        for (let c = 0; c < difficulty.cols; c++) {\n          if (newBoard[r][c].isMine) {\n            newBoard[r][c].isRevealed = true;\n          }\n        }\n      }\n      setBoard(newBoard);\n      return;\n    }\n\n    // Flood fill reveal for empty cells\n    if (cell.adjacentMines === 0) {\n      const floodFill = (r: number, c: number) => {\n        for (let dr = -1; dr <= 1; dr++) {\n          for (let dc = -1; dc <= 1; dc++) {\n            const nr = r + dr;\n            const nc = c + dc;\n            if (\n              nr >= 0 &&\n              nr < difficulty.rows &&\n              nc >= 0 &&\n              nc < difficulty.cols &&\n              !newBoard[nr][nc].isRevealed &&\n              !newBoard[nr][nc].isFlagged\n            ) {\n              newBoard[nr][nc].isRevealed = true;\n              if (newBoard[nr][nc].adjacentMines === 0) {\n                floodFill(nr, nc);\n              }\n            }\n          }\n        }\n      };\n      floodFill(row, col);\n    }\n\n    setBoard(newBoard);\n\n    // Check win condition\n    let revealedCount = 0;\n    for (let r = 0; r < difficulty.rows; r++) {\n      for (let c = 0; c < difficulty.cols; c++) {\n        if (newBoard[r][c].isRevealed) revealedCount++;\n      }\n    }\n    if (revealedCount === difficulty.rows * difficulty.cols - difficulty.mines) {\n      setWin(true);\n      setTimerActive(false);\n    }\n\n    if (!timerActive) setTimerActive(true);\n  };\n\n  // Flag cell logic\n  const flagCell = (e: React.MouseEvent, row: number, col: number) => {\n    e.preventDefault();\n    if (gameOver || win) return;\n    const newBoard = board.map((r) => r.map((c) => ({ ...c })));\n    const cell = newBoard[row][col];\n    if (cell.isRevealed) return;\n    cell.isFlagged = !cell.isFlagged;\n    setBoard(newBoard);\n  };\n\n  // Handle difficulty change\n  const handleDifficultyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const selected = e.target.value;\n    setDifficulty(difficulties[selected]);\n  };\n\n  // Restart game\n  const restartGame = () => {\n    initBoard();\n  };\n\n  return (\n    <div className=\"flex flex-col items-center p-4 max-w-screen-md mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-4\">Minesweeper</h1>\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <label htmlFor=\"difficulty\" className=\"font-semibold\">\n          Difficulty:\n        </label>\n        <select\n          id=\"difficulty\"\n          value={Object.keys(difficulties).find(\n            (key) => difficulties[key] === difficulty\n          )}\n          onChange={handleDifficultyChange}\n          className=\"border rounded px-2 py-1\"\n          disabled={timerActive}\n        >\n          {Object.entries(difficulties).map(([key, value]) => (\n            <option key={key} value={key}>\n              {key.charAt(0).toUpperCase() + key.slice(1)}\n            </option>\n          ))}\n        </select>\n        <button\n          onClick={restartGame}\n          className=\"bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700 transition\"\n        >\n          Restart\n        </button>\n        <div className=\"ml-auto font-mono text-lg\">\n          Time: {timer}s\n        </div>\n      </div>\n      <div\n        className={cn(\n          \"grid gap-0.5\",\n          `grid-cols-[repeat(${difficulty.cols},_2rem)]`,\n          `grid-rows-[repeat(${difficulty.rows},_2rem)]`\n        )}\n      >\n        {board.flat().map((cell) => (\n          <button\n            key={`${cell.row}-${cell.col}`}\n            onClick={() => revealCell(cell.row, cell.col)}\n            onContextMenu={(e) => flagCell(e, cell.row, cell.col)}\n            className={cn(\n              \"w-8 h-8 flex items-center justify-center border border-gray-400 select-none\",\n              cell.isRevealed\n                ? cell.isMine\n                  ? \"bg-red-600 text-white\"\n                  : \"bg-gray-200\"\n                : \"bg-gray-400 hover:bg-gray-300\",\n              cell.isFlagged && !cell.isRevealed ? \"bg-yellow-400\" : \"\"\n            )}\n            disabled={gameOver || win}\n            aria-label={\n              cell.isFlagged\n                ? \"Flagged cell\"\n                : cell.isRevealed\n                ? cell.isMine\n                  ? \"Mine\"\n                  : `${cell.adjacentMines} adjacent mines`\n                : \"Hidden cell\"\n            }\n          >\n            {cell.isRevealed && !cell.isMine && cell.adjacentMines > 0\n              ? cell.adjacentMines\n              : cell.isFlagged\n              ? \"ðŸš©\"\n              : \"\"}\n          </button>\n        ))}\n      </div>\n      {gameOver && (\n        <div className=\"mt-4 text-red-700 font-bold text-xl\">Game Over!</div>\n      )}\n      {win && (\n        <div className=\"mt-4 text-green-700 font-bold text-xl\">You Win!</div>\n      )}\n    </div>\n  );\n};\n\nexport default MinesweeperGame;\n"],"names":[],"mappings":"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","debugId":null}}]
}